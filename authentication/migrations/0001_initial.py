# Generated by Django 5.1.6 on 2025-07-20 21:03

import django.contrib.auth.models
import django.core.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', models.CharField(help_text='Required. Up to 15 digits allowed.', max_length=17, unique=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')], verbose_name='phone number')),
                ('employee_id', models.CharField(blank=True, help_text='Unique employee identifier', max_length=20, null=True, unique=True, verbose_name='employee ID')),
                ('department', models.CharField(blank=True, help_text='Department or team name', max_length=100, verbose_name='department')),
                ('position', models.CharField(blank=True, help_text='Job title or position', max_length=100, verbose_name='position')),
                ('is_practitioner', models.BooleanField(default=True, help_text='Designates whether this user is a field practitioner.', verbose_name='practitioner status')),
                ('is_supervisor', models.BooleanField(default=False, help_text='Designates whether this user can supervise other practitioners.', verbose_name='supervisor status')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/', verbose_name='profile picture')),
                ('emergency_contact_name', models.CharField(blank=True, max_length=100, verbose_name='emergency contact name')),
                ('emergency_contact_phone', models.CharField(blank=True, max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')], verbose_name='emergency contact phone')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('last_location_update', models.DateTimeField(blank=True, help_text='Last time GPS location was updated', null=True, verbose_name='last location update')),
                ('current_latitude', models.DecimalField(blank=True, decimal_places=16, max_digits=22, null=True, verbose_name='current latitude')),
                ('current_longitude', models.DecimalField(blank=True, decimal_places=16, max_digits=22, null=True, verbose_name='current longitude')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'auth_user',
                'indexes': [models.Index(fields=['phone_number'], name='auth_user_phone_n_baf3e9_idx'), models.Index(fields=['employee_id'], name='auth_user_employe_d6f0da_idx'), models.Index(fields=['is_practitioner'], name='auth_user_is_prac_6bb1aa_idx'), models.Index(fields=['created_at'], name='auth_user_created_2cecd0_idx')],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
